[
  {
    "id": 2,
    "user_id": 3,
    "name": "",
    "shader_scripts": [
      {
        "id": 2,
        "code": "attribute vec4 position;\nvoid main() {\n  gl_Position = position;\n\n}",
        "buffer": {
          "format": "rgba8unorm",
          "width": 512,
          "height": 512
        }
      }
    ]
  },
  {
    "id": 3,
    "user_id": 3,
    "name": "",
    "shader_scripts": [
      {
        "id": 4,
        "code": "@vertex\nfn vs_main(@builtin(vertex_index) vertex_index: u32) -\u003e @builtin(position) vec4\u003cf32\u003e {\n    var pos = array\u003cvec2\u003cf32\u003e, 3\u003e(\n        vec2\u003cf32\u003e(-1.0, -1.0),\n        vec2\u003cf32\u003e( 3.0, -1.0),\n        vec2\u003cf32\u003e(-1.0,  3.0)\n    );\n    return vec4\u003cf32\u003e(pos[vertex_index], 0.0, 1.0);\n}\n\n@fragment\nfn fs_main(@builtin(position) coord: vec4\u003cf32\u003e) -\u003e @location(0) vec4\u003cf32\u003e {\n    let uv = coord.xy / u.resolution;\n    // Sample from previous scripts if available\n    // let previousColor = textureSample(buffer1, buffer1_sampler, uv);\n    let color = vec3\u003cf32\u003e(uv, 0.5 + 0.5 * sin(5.0 * u.time));\n    return vec4\u003cf32\u003e(color,1.0);\n}",
        "buffer": {
          "format": "rgba8unorm",
          "width": 512,
          "height": 512
        }
      },
      {
        "id": 5,
        "code": "@vertex\nfn vs_main(@builtin(vertex_index) vertex_index: u32) -\u003e @builtin(position) vec4\u003cf32\u003e {\n    var pos = array\u003cvec2\u003cf32\u003e, 3\u003e(\n        vec2\u003cf32\u003e(-1.0, -1.0),\n        vec2\u003cf32\u003e( 3.0, -1.0),\n        vec2\u003cf32\u003e(-1.0,  3.0)\n    );\n    return vec4\u003cf32\u003e(pos[vertex_index], 0.0, 1.0);\n}\n\n@fragment\nfn fs_main(@builtin(position) coord: vec4\u003cf32\u003e) -\u003e @location(0) vec4\u003cf32\u003e {\n    let uv = coord.xy / u.resolution;\n    // Sample from previous scripts if available\n    let color = textureSample(buffer4, buffer4_sampler, uv);\nif (uv.x \u003c u.mouse.x) {return vec4\u003cf32\u003e(0.5);}\nif (1.0 - uv.y \u003c u.mouse.y) {return vec4\u003cf32\u003e(0.25);}\n    return vec4\u003cf32\u003e(color);\n}",
        "buffer": {
          "format": "rgba8unorm",
          "width": 512,
          "height": 512
        }
      }
    ]
  },
  {
    "id": 1,
    "user_id": 1,
    "name": "Basic Fragment Shader",
    "shader_scripts": [
      {
        "id": 1,
        "code": "precision mediump float;\nvoid main() {\n  gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n}",
        "buffer": {
          "format": "",
          "width": 0,
          "height": 0
        }
      }
    ],
    "tags": [
      {
        "id": 1,
        "name": "fragment"
      }
    ]
  }
]